;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Tue Dec 5 2023
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================
PROCED1 SEGMENT
   ISR1 PROC FAR
      ASSUME CS:PROCED1, DS:DATA
      ORG 01000H ; write code within below starting at address 08000H
      PUSHF ; push 16-bit operands
      PUSH AX ; save program context
      PUSH DX
      
      CMP FLAG_TEST1, 01H
      JE RESET_FLAG1	    
      MOV FLAG_TEST1, 01H
      JMP OKAY1
      
      RESET_FLAG1:
	 MOV FLAG_TEST1, 00H
	 
     OKAY1:
      POP DX ; retrieve program context
      POP AX
      POPF ; pop 16-bit operands
      IRET ; return from interrupt  
   ISR1 ENDP ; end of procedure
PROCED1 ENDS

PROCED2 SEGMENT
      ISR2 PROC FAR
      ASSUME CS:PROCED2, DS:DATA
      ORG 02000H ; write code within below starting at address 09000H
      PUSHF ; push 16-bit operands
      PUSH AX ; save program context
      PUSH DX
      
      CMP FLAG_TEST2, 01H
      JE RESET_FLAG2
      
      MOV FLAG_TEST2, 01H
      JMP OKAY2
      
      RESET_FLAG2:
	 MOV FLAG_TEST2, 00H
	 
      OKAY2:
      POP DX ; retrieve program context
      POP AX
      POPF ; pop 16-bit operands
      IRET ; return from interrupt
   
   ISR2 ENDP ; end of procedure
PROCED2 ENDS

DATA SEGMENT

   PORTA EQU 0C0H
   PORTB EQU 0C2H
   PORTC EQU 0C4H
   PORT_CON EQU 0C6H
   
   PORTAA EQU 0F0H
   PORTBB EQU 0F2H
   PORTCC EQU 0F4H
   PORT_CONN EQU 0F6H
   
   PIC1 EQU 0F8H
   PIC2 EQU 0FAH
   ICW2 EQU 080H
   ICW1 EQU 13H
   ICW4 EQU 03H
   OCW1 EQU 11111000B
   
   FLAG_TEST1 DB 0
   FLAG_TEST2 DB 0   
   
   START_    DB    "INITIALIZING.... $"
   
   Celsius    DB    "Celsius: $"
   Mb   DB	  "Milibar: $"
   Fahrenheit    DB    "Fahrenheit: $"
   ATM   DB	  "ATM: $"
   HUMIDITY    DB    "HUMIDITY: $"
   
   
DATA ENDS

STK SEGMENT STACK
BOS DW 64d DUP(?) ; stack depth (bottom of stack)
TOS LABEL WORD ; top of stack
STK ENDS

CODE SEGMENT PUBLIC 'CODE'
    ASSUME CS:CODE, DS:DATA, SS:STK
    
ORG 08000H


START:
	MOV AX, DATA
	MOV DS, AX ; set the Data Segment address
	MOV AX, STK
	MOV SS, AX ; set the Stack Segment address
	LEA SP, TOS ; set address of SP as top of stack
	CLI ; clears IF flag
	
	
	;COMMAND BYTE
        MOV DX, PORT_CON
	MOV AL, 10011001B
	OUT DX, AL

	MOV DX, PORT_CONN
	MOV AL, 89H
	OUT DX, AL

	MOV DX, PIC1 ; set I/O address to access ICW1
	MOV AL, ICW1
	OUT DX, AL ; send command word
	MOV DX, PIC2 ; set I/O address to access ICW4 and OCW1
	MOV AL, ICW2
	OUT DX, AL
	MOV AL, ICW4
	OUT DX, AL ; send command word
	MOV AL, OCW1
	OUT DX, AL ; send command word
	 STI 

	MOV AX, OFFSET ISR1
	MOV [ES:200H], AX
	
	MOV AX, SEG ISR1
	MOV [ES:202H], AX
	
	MOV AX, OFFSET ISR2
	MOV [ES:204H], AX
	
	MOV AX, SEG ISR2
	MOV [ES:206H], AX	
	
	
	CALL INIT_LCD
	
	JMP STARTINGS
	
HERE:	
	
	;SETTING THE ADC
	MOV DX, PORTB
	MOV AL, 00000000b
	OUT DX, AL
	CALL DELAY
	
	MOV DX, PORTB
	MOV AL, 00001000b
	OUT DX, AL
	CALL DELAY_1MS
	
	MOV DX, PORTB
	MOV AL, 00011000b
	OUT DX, AL
	CALL DELAY
	
	MOV DX, PORTB
	MOV AL, 00100000b
	OUT DX, AL
	CALL DELAY_1MS

	MOV DX, PORTC
	IN AL, DX

	JMP CELSIUS_CALC
	
		
CONT:		
	MOV DX, PORTB
	MOV AL, 00000001b
	OUT DX, AL
	CALL DELAY
	
	MOV DX, PORTB
	MOV AL, 00001001b
	OUT DX, AL
	CALL DELAY_1MS
	
	MOV DX, PORTB
	MOV AL, 00011001b
	OUT DX, AL
	CALL DELAY
	
	MOV DX, PORTB
	MOV AL, 00100000b
	OUT DX, AL
	CALL DELAY_1MS
	
	MOV DX, PORTC
	IN AL, DX
	
	JMP MILIBAR_CALC


CONTINUE:

	MOV DX, PORTB
	MOV AL, 00000010b
	OUT DX, AL
	CALL DELAY
	
	MOV DX, PORTB
	MOV AL, 00001010b
	OUT DX, AL
	CALL DELAY_1MS
	
	MOV DX, PORTB
	MOV AL, 00011010b
	OUT DX, AL
	CALL DELAY
	
	MOV DX, PORTB
	MOV AL, 00100000b
	OUT DX, AL
	CALL DELAY_1MS
	
	MOV DX, PORTC
	IN AL, DX

	JMP HUMIDITY_CALC
	

STARTINGS:
      PUSH AX
	MOV AL, 94H
       CALL INST_CTRL 
       LEA SI, START_
      TXT0:
       PUSH AX
       MOV AL, [SI]
       CMP AL, '$'
       JE EXIT0
       CALL DATA_CTRL
       INC SI
       POP AX
       INC AX
       LOOP TXT0
       
      EXIT0: 
      POP AX
       POP AX
       JMP BLANK   	
	
BOOT_Celsius:
      PUSH AX
	MOV AL, 0C0H
       CALL INST_CTRL 
       LEA SI, Celsius
      TXT:
       PUSH AX
       MOV AL, [SI]
       CMP AL, '$'
       JE EXIT
       CALL DATA_CTRL
       INC SI
       POP AX
       INC AX
       LOOP TXT
       
      EXIT: 
      POP AX
       POP AX
       JMP CALC_CELSIUS

BOOT_Milibar:
      PUSH AX
	MOV AL, 94H
       CALL INST_CTRL 
       LEA SI, Mb
      TXT1:
       PUSH AX
       MOV AL, [SI]
       CMP AL, '$'
       JE EXIT1
       CALL DATA_CTRL
       INC SI
       POP AX
       INC AX
       LOOP TXT1
       
      EXIT1: 
      POP AX
       POP AX
       JMP CALC_ATM     

BOOT_Fahrenheit:
      PUSH AX
	MOV AL, 0C0H
       CALL INST_CTRL 
       LEA SI, Fahrenheit
      TXT_1:
       PUSH AX
       MOV AL, [SI]
       CMP AL, '$'
       JE EXIT_1
       CALL DATA_CTRL
       INC SI
       POP AX
       INC AX
       LOOP TXT_1
       
      EXIT_1: 
      POP AX
       POP AX
       JMP CALC_FAHRENHEIT

 
BOOT_Atmosphere:
      PUSH AX
	MOV AL, 94H
       CALL INST_CTRL 
       LEA SI, Atm
      TXT_11:
       PUSH AX
       MOV AL, [SI]
       CMP AL, '$'
       JE EXIT_11
       CALL DATA_CTRL
       INC SI
       POP AX
       INC AX
       LOOP TXT_11
       
      EXIT_11: 
      POP AX
       POP AX
       JMP Calc_MILIBAR  
       
BOOT_HUMIDITY:
      PUSH AX
	MOV AL, 0D4H
       CALL INST_CTRL 
       LEA SI, HUMIDITY
      TXT__:
       PUSH AX
       MOV AL, [SI]
       CMP AL, '$'
       JE EXIT__
       CALL DATA_CTRL
       INC SI
       POP AX
       INC AX
       LOOP TXT__
       
      EXIT__: 
      POP AX
       POP AX
       JMP CALC_HUMIDITY
       
CELSIUS_CALC:	

	CMP FLAG_TEST1, 01H
	JE FAHRENHEIT_CALC

	MOV BX, 00H
	MOV BL, 150D
	MUL BL
	MOV BL, 77D
	DIV BL	
	
	XOR AH,AH
	MOV BL,100D
	DIV BL
	MOV BX, AX
	JMP CELSIUS_OUT
	
FAHRENHEIT_CALC:
	
	MOV BX, 00H
	MOV BX, 150D
	MUL BL
	MOV BX, 77D
	DIV BL
	
	XOR AH,AH
	MOV BX, 9D
	MUL BX
	MOV BX, 5D
	DIV BX
	MOV BX, 32D
	ADD AX, BX


	MOV BL,100D
	DIV BL
	XOR CX, CX
	MOV CX, AX	
	
	JMP FAHRENHEIT_OUT
	
MILIBAR_CALC:

	CMP FLAG_TEST2, 01H
	JE ATMOSPHERE_CALC	
	
	MOV BX, 00H
	MOV BL, 115D
	MUL BL
	MOV BL, 243D
	DIV BL
	
	XOR AH, AH
	
	MOV BX, 10D
	MUL BX
	
	MOV BX,1000D
	DIV BX
	MOV BL, AL
	
	PUSH DX
	PUSH BX
	JMP MILIBAR_OUT	

ATMOSPHERE_CALC:

	MOV BX, 00H
	MOV BL, 115D
	MUL BL
	MOV BL, 243D
	DIV BL
	
	XOR AH, AH
	
	MOV BX, 10D
	MUL BX
	
	MOV BX, 1013D
	DIV BX
	MOV BL, AL
	
	PUSH DX
	PUSH BX
	JMP ATMOSPHERE_OUT	
	
CELSIUS_OUT:
   
	PUSH BX
	JMP BOOT_CELSIUS
CALC_CELSIUS:	
	MOV AL, 0C8H
	CALL INST_CTRL
	
	POP BX
	MOV AL, BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 0C9H
	CALL INST_CTRL
	
	
	MOV AL, AH
	XOR AH,AH
	MOV BL,10D
	DIV BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
      
	MOV AL, 0CAH
	CALL INST_CTRL      
	MOV AL, AH
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL	
	
	
	MOV AL, 0CBH
	CALL INST_CTRL	
	MOV AL, ' '
	CALL DATA_CTRL

	
	MOV AL, 0CCH
	CALL INST_CTRL	
	MOV AL, ' '
	CALL DATA_CTRL

	MOV AL, 0CDH
	CALL INST_CTRL
	MOV AL, ' '
	CALL DATA_CTRL
		
	JMP CONT
;	JMP HERE
	
FAHRENHEIT_OUT:
	
	PUSH CX
	JMP BOOT_FAHRENHEIT
CALC_FAHRENHEIT:	
	MOV AL, 0CBH
	CALL INST_CTRL
	
	POP BX
	MOV AX, BX
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 0CCH
	CALL INST_CTRL
	

	MOV AL, AH
	XOR AH,AH
	MOV BL,10D
	DIV BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
      
	MOV AL, 0CDH
	CALL INST_CTRL      
	MOV AL, AH
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL	
	
	JMP CONT		
	
MILIBAR_OUT:

	PUSH DX
	PUSH BX
	JMP BOOT_MILIBAR

Calc_MILIBAR:
	MOV AL, 98H
	CALL INST_CTRL
	
	POP BX
	MOV AL, BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 99H
	CALL INST_CTRL
	
	MOV AL, '.'
	CALL DATA_CTRL	

	MOV AL, 9AH
	CALL INST_CTRL
	
	POP DX
	MOV AX, DX
	XOR DX, DX
	MOV BL,100D
	DIV BL

	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 9BH
	CALL INST_CTRL      
	
	MOV AL, AH
	XOR AH, AH
	MOV BL, 10D
	DIV BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 9CH
	CALL INST_CTRL  
	
	MOV AL, AH
	XOR AH, AH
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL

	MOV AL, 9DH
	CALL INST_CTRL 

	MOV AL, ' '
	CALL DATA_CTRL

	MOV AL, 9EH
	CALL INST_CTRL 

	MOV AL, ' '
	CALL DATA_CTRL	

	MOV AL, 9FH
	CALL INST_CTRL 

	MOV AL, ' '
	CALL DATA_CTRL		
	
	JMP Continue
	
ATMOSPHERE_OUT:

	PUSH DX
	PUSH BX
	JMP BOOT_ATMOSPHERE

CALC_ATM:
	MOV AL, 9CH
	CALL INST_CTRL
	
	POP BX
	MOV AL, BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 9DH
	CALL INST_CTRL
	
	
	POP DX
	MOV AX, DX
	XOR DX, DX
	MOV BL,100D
	DIV BL

	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 9EH
	CALL INST_CTRL      
	
	MOV AL, AH
	XOR AH, AH
	MOV BL, 10D
	DIV BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 9FH
	CALL INST_CTRL  
	
	MOV AL, AH
	XOR AH, AH
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL	
	
	JMP Continue	

HUMIDITY_CALC:	

	MOV BX, 00H
	MOV BL, 100D
	MUL BL
	MOV BL, 200D
	DIV BL	
	
	XOR AH,AH
	MOV BL,100D
	DIV BL
	MOV BX, AX
	JMP HUMIDITY_OUT

HUMIDITY_OUT:
   
	PUSH BX
	JMP BOOT_HUMIDITY
	
CALC_HUMIDITY:	
	MOV AL, 0DDH
	CALL INST_CTRL
	
	POP BX
	MOV AL, BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
	MOV AL, 0DEH
	CALL INST_CTRL
	
	
	MOV AL, AH
	XOR AH,AH
	MOV BL,10D
	DIV BL
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL
	
      
	MOV AL, 0DFH
	CALL INST_CTRL      
	MOV AL, AH
	MOV BL, 30H
	ADD AL, BL
	CALL DATA_CTRL	
	
	
	MOV AL, 0E1H
	CALL INST_CTRL	
	MOV AL, '%'
	CALL DATA_CTRL
		
	JMP HERE	
	
INST_CTRL:
   PUSH AX
   MOV DX, PORTAA
   OUT DX, AL
   MOV DX, PORTBB
   MOV AL, 02H
   OUT DX, AL
   CALL DELAY_1MS
   MOV DX, PORTBB
   MOV AL, 00H
   OUT DX, AL
   POP AX
   RET

INIT_LCD:
   MOV AL, 38H
   CALL INST_CTRL
   MOV AL, 08H
   CALL INST_CTRL
   MOV AL, 01H
   CALL INST_CTRL
   MOV AL, 06H
   CALL INST_CTRL
   MOV AL, 0CH
   CALL INST_CTRL 
   RET
   
DATA_CTRL:
   PUSH AX
   MOV DX, PORTAA
   OUT DX, AL
   MOV DX, PORTBB
   MOV AL, 03H
   OUT DX, AL
   CALL DELAY_1MS
   MOV DX, PORTBB
   MOV AL, 01H
   OUT DX, AL
   POP AX
   RET
  
  
DELAY_1MS:
   MOV BX, 02CAH
   L1:
   NOP
   DEC BX
   JNZ L1
   RET	
DELAY:
   MOV BX, 0FFFFH
   L12:
   NOP
   DEC BX
   JNZ L12
   RET
blank:	
	CALL DELAY
	CALL DELAY
	CALL DELAY
      	MOV AL, 01h
	CALL INST_CTRL
	JMP HERE
	
CODE    ENDS
        END START