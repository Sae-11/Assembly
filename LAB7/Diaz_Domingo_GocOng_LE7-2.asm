                ;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Mon Nov 13 2023
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================
PROCED1 SEGMENT
   ISR1 PROC FAR
      ASSUME CS:PROCED1, DS:DATA
      ORG 01000H ; write code within below starting at address 08000H
      PUSHF ; push 16-bit operands
      PUSH AX ; save program context
      PUSH DX
	    
      MOV FLAG_TEST1, 01H
      
      POP DX ; retrieve program context
      POP AX
      POPF ; pop 16-bit operands
      IRET ; return from interrupt  
   ISR1 ENDP ; end of procedure
PROCED1 ENDS

PROCED2 SEGMENT
      ISR2 PROC FAR
      ASSUME CS:PROCED2, DS:DATA
      ORG 02000H ; write code within below starting at address 09000H
      PUSHF ; push 16-bit operands
      PUSH AX ; save program context
      PUSH DX
      
      MOV FLAG_TEST2, 02H
	    
      POP DX ; retrieve program context
      POP AX
      POPF ; pop 16-bit operands
      IRET ; return from interrupt
   
   ISR2 ENDP ; end of procedure
PROCED2 ENDS


DATA SEGMENT
	ORG 0300H
 	PORTA EQU 0C0H ; PORTA address
 	PORTB EQU 0C2H ; PORTB address
 	PORTC EQU 0C4H ; PORTC address
 	COM_REG EQU 0C6H ; Command Register Address
	PIC1 EQU 0F8H
	PIC2 EQU 0FAH
	ICW2 EQU 080H
	ICW1 EQU 13H
	ICW4 EQU 03H
	OCW1 EQU 11111000B
	
	FLAG_TEST1 DB 0
	FLAG_TEST2 DB 0
	
DATA ENDS

STK SEGMENT STACK
BOS DW 64d DUP(?) ; stack depth (bottom of stack)
TOS LABEL WORD ; top of stack
STK ENDS

CODE SEGMENT PUBLIC 'CODE'
    ASSUME CS:CODE, DS:DATA, SS:STK
    
ORG 08000H

START:
	MOV AX, DATA
	MOV DS, AX ; set the Data Segment address
	MOV AX, STK
	MOV SS, AX ; set the Stack Segment address
	LEA SP, TOS ; set address of SP as top of stack
	CLI ; clears IF flag
	
        MOV DX, COM_REG
	MOV AL, 81H
	OUT DX, AL

	MOV DX, PIC1 ; set I/O address to access ICW1
	MOV AL, ICW1
	OUT DX, AL ; send command word
	MOV DX, PIC2 ; set I/O address to access ICW4 and OCW1
	MOV AL, ICW2
	OUT DX, AL
	MOV AL, ICW4
	OUT DX, AL ; send command word
	MOV AL, OCW1
	OUT DX, AL ; send command word
	 STI 

	MOV AX, OFFSET ISR1
	MOV [ES:200H], AX
	
	MOV AX, SEG ISR1
	MOV [ES:202H], AX
	
	MOV AX, OFFSET ISR2
	MOV [ES:204H], AX
	
	MOV AX, SEG ISR2
	MOV [ES:206H], AX
	
	
	
	   
HERE:
      CMP FLAG_TEST1, 01H
      JE PORTA_OUT
      CMP FLAG_TEST2, 02H
      JE PORTB_OUT
      CALL PORTC7
      
       MOV DX, PORTC
       MOV AL, 0H
       MOV CL, 4H
       SHL AL, CL
       OUT DX, AL      
      
      
   JMP HERE
   
PORTC7:
      MOV DX, PORTC
      MOV AL, 8H
      MOV CL, 4H
      SHL AL, CL
      OUT DX, AL
      RET
   
PORTA_OUT:
	 POP AX
      	 MOV DX, PORTC
	 IN AL, DX
	 AND AL, 0FH ; mask upper nibble
	 
	 CMP AL, 00H ; check if key pressed is 1 (00H)
	 JE D1 ; display 1
	 CMP AL, 01H ; check if key pressed is 2 (01H)
	 JE D2 ; display 2
	 CMP AL, 02H ; check if key pressed is 3 (02H)
	 JE D3 ; display 3
	 CMP AL, 04H ; check if key pressed is 4 (04H)
	 JE D4 ; display 4
	 CMP AL, 05H ; check if key pressed is 5 (05H)
	 JE D5 ; display 5
	 CMP AL, 06H ; check if key pressed is 6 (06H)
	 JE D6 ; display 6
	 CMP AL, 08H ; check if key pressed is 7 (08H)
	 JE D7 ; display 7
	 CMP AL, 09H ; check if key pressed is 8 (09H)
	 JE D8 ; display 8
	 CMP AL, 0AH ; check if key pressed is 9 (0AH)
	 JE D9 ; display 9
	 CMP AL, 0CH ; check if key pressed is * (0CH)
	 JE D10 ; display -
	 CMP AL, 0DH ; check if key pressed is 0 (0DH)
	 JE D0 ; display 0
	 CMP AL, 0EH ; check if key pressed is * (0EH)
	 JE D10 ; display -
	 D0:
	  MOV AL, 00111111B ; display ‘0‘
	  JMP CONT
	 D1:
	  MOV AL, 00000110B ; display ‘1‘
	  JMP CONT
	 D2: 
	 MOV AL, 01011011B ; display ‘2‘
	  JMP CONT
	 D3: 
	    MOV AL, 01001111B ; display ‘3‘
	    JMP CONT
	 D4:
	    MOV AL, 01100110B ; display ‘4‘
	    JMP CONT
	 D5:
	    MOV AL, 01101101B ; display ‘5‘
	    JMP CONT
	 D6: 
	    MOV AL, 01111101B ; display ‘6‘
	    JMP CONT
	 D7:
	    MOV AL, 00000111B ; display ‘7‘
	    JMP CONT
	 D8:
	    MOV AL, 01111111B ; display ‘8‘
	    JMP CONT
	 D9:
	    MOV AL, 01100111B ; display ‘9‘
	    JMP CONT
	 D10:
	    MOV AL, 01000000B ; display ‘-‘
	    JMP CONT

   CONT:
   PUSH AX
   MOV DX, PORTA
   OUT DX, AL
   CALL DELAY_1MS
   MOV FLAG_TEST1, 00H
   JMP HERE
   
PORTB_OUT: 
 
      POP AX
      MOV DX, PORTB
      OUT DX, AL	 
      CALL DELAY_1MS
      MOV FLAG_TEST2, 00H
      JMP HERE
	 
DELAY_1MS:
   MOV BX, 002CAH
   L1:
   NOP
   JNZ L1
   RET   
;EXIT: 
;      MOV DX, PORTB
;      MOV AL, 00111111b
;      OUT DX, AL
;      JMP HERE
	

	

     
	
	
	
	
		
ENDLESS:
        JMP ENDLESS
CODE    ENDS
        END START