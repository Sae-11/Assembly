                                                                   ;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Mon Nov 13 2023
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================
PROCED1 SEGMENT
   ISR1 PROC FAR
      ASSUME CS:PROCED1, DS:DATA
      ORG 01000H ; write code within below starting at address 08000H
      PUSHF ; push 16-bit operands
      PUSH AX ; save program context
      PUSH DX      
      MOV DX, PORTA
      MOV AL, 01101111b
      OUT DX, AL     
      POP DX ; retrieve program context
      POP AX
      POPF ; pop 16-bit operands
      IRET ; return from interrupt
   
   ISR1 ENDP ; end of procedure
PROCED1 ENDS

PROCED2 SEGMENT
      ISR2 PROC FAR
      ASSUME CS:PROCED2, DS:DATA
      ORG 02000H ; write code within below starting at address 09000H
      PUSHF ; push 16-bit operands
      PUSH AX ; save program context
      PUSH DX
      MOV DX, PORTA
      MOV AL, 00111111b
      OUT DX, AL 
      POP DX ; retrieve program context
      POP AX
      POPF ; pop 16-bit operands
      IRET ; return from interrupt
   
   ISR2 ENDP ; end of procedure
PROCED2 ENDS


DATA SEGMENT
	ORG 0300H
 	PORTA EQU 0C0H ; PORTA address
 	PORTB EQU 0C2H ; PORTB address
 	PORTC EQU 0C4H ; PORTC address
 	COM_REG EQU 0C6H ; Command Register Address
	PIC1 EQU 0F8H
	PIC2 EQU 0FAH
	ICW2 EQU 080H
	ICW1 EQU 13H
	ICW4 EQU 03H
	OCW1 EQU 11111100B
	
DATA ENDS

STK SEGMENT STACK
BOS DW 64d DUP(?) ; stack depth (bottom of stack)
TOS LABEL WORD ; top of stack
STK ENDS

CODE SEGMENT PUBLIC 'CODE'
    ASSUME CS:CODE, DS:DATA, SS:STK
    
ORG 08000H

START:
	MOV AX, DATA
	MOV DS, AX ; set the Data Segment address
	MOV AX, STK
	MOV SS, AX ; set the Stack Segment address
	LEA SP, TOS ; set address of SP as top of stack
	CLI ; clears IF flag
	
        MOV DX, COM_REG
	MOV AL, 89H
	OUT DX, AL

	MOV DX, PIC1 ; set I/O address to access ICW1
	MOV AL, ICW1
	OUT DX, AL ; send command word
	MOV DX, PIC2 ; set I/O address to access ICW4 and OCW1
	MOV AL, ICW2
	OUT DX, AL
	MOV AL, ICW4
	OUT DX, AL ; send command word
	MOV AL, OCW1
	OUT DX, AL ; send command word
	 STI 

	MOV AX, OFFSET ISR1
	MOV [ES:200H], AX
	
	MOV AX, SEG ISR1
	MOV [ES:202H], AX
	
	MOV AX, OFFSET ISR2
	MOV [ES:204H], AX
	
	MOV AX, SEG ISR2
	MOV [ES:206H], AX
	`
	
	
HERE:
      
      MOV DX, PORTC
      IN AL, DX
      CMP AL, 09H
      JG EXIT
      
      MOV DX, PORTB
      MOV AH, 00H
      MOV SI, AX
      MOV AL, SEG_PATTERN[SI]
      OUT DX, AL
        
   JMP HERE

EXIT: 
      MOV DX, PORTB
      MOV AL, 00111111b
      OUT DX, AL
      JMP HERE
	

ON:	
	PUSH AX
ON1:	
	MOV DX, PORTC
	IN AL, DX
	TEST AL, 01H
	JZ ON1
	
	POP AX
	RET
		 
	
	
DELAY:
	 MOV CX, 0FFFFFH 
	 
	 LOOP_DELAY:
	    DEC CX
	    
	    CMP CX, 00
	    JNE LOOP_DELAY

      ret
     
	
	SEG_PATTERN DB 00111111b
	    DB 00000110b
	    DB 01011011b
	    DB 01001111b
	    DB 01100110b
	    DB 01101101b
	    DB 01111101b
	    DB 00000111b 
	    DB 01111111b
	    DB 01101111b	
	
	
		
ENDLESS:
        JMP ENDLESS
CODE    ENDS
        END START